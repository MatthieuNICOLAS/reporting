* Journal de bord
** Semaine du <2016-09-12 lun.> au <2016-09-16 ven.>
*** Done
- Faire un état de l'art des mécanismes d'authentification
  - Différences entre OAuth et OpenID
    - OAuth est un protocole d'*autorisation*
    - Il permet à un utilisateur de donner accès à certaines données/actions de son compte à un service tiers
      - Exemple avec Google +
        - Récupérer les informations du profil
        - Récupérer les informations des cercles d'amis de l'utilisateur
        - Envoyer des mails au nom de l'utilisateur
      - Exemple avec GitHub
        - Récupérer les informations du profil
        - Accéder aux repos de l'utilisateur
        - Faire des commits en son nom
    - Il ne s'agit cependant pas d'un protocole d'*authentification*
      - On peut supposer que si Google ou GitHub nous donne accès au compte de l'utilisateur, c'est car ce dernier s'est authentifié correctement
      - Mais rien n'empêche un site ayant obtenu un code (car l'utilisateur a donné l'autorisation à ce dernier) d'utiliser ce code pour usurper l'identité de l'utilisateur sur un autre site
    - OpenID lui est un protocole d'*authentification*
      - Il permet seulement de vérifier l'identité d'un utilisateur
      - Il ne permet pas d'accéder à des données de son compte autre que celles du profil
    - OpenID Connect est un protocole basé sur OAuth 2.0 qui ajoute une couche d'authentification au protocole
    - Sources
      - http://security.stackexchange.com/questions/44611/difference-between-oauth-openid-and-openid-connect-in-very-simple-term
      - https://oauth.net/2/
      - https://en.wikipedia.org/wiki/OpenID
      - http://openid.net/connect/
      - http://www.thread-safe.com/2012/01/problem-with-oauth-for-authentication.html
  - Libraries/Frameworks
    - Pour OAuth2: https://oauth.net/code/
    - Pour OpenID Connect: http://openid.net/developers/libraries/
*** Planned
** Semaine du <2016-09-19 lun.> au <2016-09-23 ven.>
*** Done
- Faire un état de l'art des mécanismes d'authentification
  - Réalisation des slides
    - Disponibles ici : https://github.com/MatthieuNICOLAS/authentication-systems-2016-09-20/
  - Ajout des nouvelles sources : 
    - [[https://pdfs.semanticscholar.org/3733/2607f7a7ac8284c514845957fd00583e5614.pdf][Different Ways to Authenticate Users with the Pros and Cons of each Method]]
      - Bonne définition de l'*Authentification*.
      - Parle de l'authentification à facteurs multiples :
        - Passwords
        - Smart cards
        - X509 certificate
        - Biometrics
      - Présente les avantages et inconvénients ainsi que les vulnérabilités de chacune.
    - [[http://stackoverflow.com/questions/663402/what-are-the-differences-between-ldap-and-active-directory][What are the differences between LDAP and Active Directory?]]
      - Donne les définitions de *Directory Service*, *Active Directory* et *Lightweight Directory Access Protocol*
    - [[https://www.neustar.biz/blog/what-is-single-sign-on-deployment-pros-cons][The Pros & Cons of Implementing Single Sign-On]]
      - Explique les différences entre *Full Sign-On*, *Reduced Sign-On* et *Federated Logins*
    - [[https://tools.ietf.org/html/rfc6749][RFC 6749 - The OAuth 2.0 Authorization Framework]]
      - Description du protocole OAuth 2.0
    - [[http://wiki.oauth.net/w/page/27249271/OAuth%202%20for%20Native%20Apps][OAuth 2 for Native Apps]]
    - [[https://tools.ietf.org/html/draft-ietf-oauth-native-apps-03][Authorization Flow for Native Apps Using App-Claimed URI Schemes]]
    - [[http://nat.sakimura.org/2012/01/20/openid-connect-nutshell/][OpenID Connect in a nutshell]]
    - [[http://wiki.openid.net/w/page/12995171/Introduction][OpenID explaination]]
    - [[https://en.wikipedia.org/wiki/OAuth#/media/File:OpenIDvs.Pseudo-AuthenticationusingOAuth.svg][OpenID Authentication vs Pseudo-Authentication using OAuth]]
    - [[https://www.owasp.org/index.php/Authentication_Cheat_Sheet][Authentication Cheat Sheet]]
- Finaliser les slides sur les mécanismes d'authentification et les envoyer à TVPaint
  - Ajout de références vers les articles lus/utilisés et pouvant s'avérer utiles pour leur compréhension
  - Création d'un thread sur le forum de TVPaint pour linker les slides et les inviter à poser leurs questions
- MUTE : Implémenter le bot de traduction
  - Problème avec la librairie *mute-client*
    - *mute-client* embarque *AceEditorAdapter*
    - Ce code JS suppose que *AceEditor* est dans le scope
    - Ce n'est pas le cas dans le bot
- PLM : Activer Blockly
  - Modification du code de *GitActor* pour gérer les langages de programmation visuels
    - Stocker le code généré par l'outil de programmation visuel
    - Mais aussi stocker le /code visuel/
      - Pour pouvoir regénérer l'espace de travail de l'apprenant à sa prochaine connexion
  - Modification du code de *PLMActor* pour gérer les langages de programmation visuels
    - Envoi à *GitActor* le /code visuel/
    - Lors de la récupération de la session de l'utilisateur, on ne récupère pas le code de l'élève
      - Puisqu'il s'agit du code généré par l'outil de programmation visuel
        - Par exemple du code Python dans le cas de Blockly
    - Il faut récupérer plutôt le /code visuel/ pour regénérer l'espace de travail
    - Pour le moment, on se contente de renvoyer un /code visuel/ vide
  - Activation de Blockly
    - Création d'une instance de *LangBlockly*
    - Ajout de celle-ci dans les langages de programmation supportés
  - Modification du code pour gérer les exercices ne supportant pas Blockly
    - Passage automatique au langage de programmation par défaut si le langage courant n'est pas supporté
    - Affichage d'un message d'avertissement lorsque l'utilisateur essaie de passer à un langage non-supporté par l'exo courant
  - Mise à jour des sérialisation JSON des exercices
*** Planned
**** DONE Faire un état de l'art des mécanismes d'authentification
- Étudier les différents mécanismes existants et comment ils interagissent entre eux
  - SAML
  - SOAP
  - OAuth
  - OpenID
  - LDAP

**** DONE Finaliser les slides sur les mécanismes d'authentification et les envoyer à TVPaint
- J'ai noté quelques sources qui pourraient s'avérer utiles pour TVPaint
- Les ajouter aux slides
- Envoyer les slides à TVPaint
**** DONE PLM : Activer Blockly
- [[http://www.pentilanero.com/][Pentila]] m'a recontacté à propos de PLM
- Ils sont en train de travailler sur PLM pour voir comment ajouter de nouveaux exercices fonctionnant avec Blockly
- Sauf que j'ai désactivé Blockly lors du refactoring
- Activer de nouveau Blockly
- Vérifier son bon fonctionnement
** Semaine du <2016-09-26 lun.> au <2016-09-30 ven.>
*** Done
- TVPaint : Réviser les notions autour du *Business Process* et des *Workflows*
  - L'activité /Call/ est-elle utilisable ou à éviter ?
  - Que signifie la notion d'entité lorsqu'on parle de /Choreography/ ?
    - Similaire à la notion de /Pool/ ?
  - Différences entre /Choreography/ et /Collaboration/
    - Pourquoi utiliser l'un et pas l'autre ?
    - Formalisme différent, et la /Choreography/ fonctionne par le biais d'envoi de messages
  - Une /Choreography/ est-elle forcément entre 2 entités ?
    - Il n'y a jamais eu le besoin de définir une choréographie entre 3+ entités ?
    - Non, une /Choreography/ peut avoir lieu entre 3+ entités
- MUTE : Implémenter le bot de traduction
  - Ajout de la classe *TranslatorBot*
    - Instancie un *Bot* pour être pouvoir être ajouté au réseau
    - Instancie un *Coordinator* lors de son ajout au réseau
    - Écoute l'évènement /update/ du *Coordinator* pour déclencher l'opération de traduction
    - Écoute l'évènement /operations/ du *Coordinator* pour transmettre les opérations générées localement aux pairs 
    - Lors d'un /update/, parcourt le document pour trouver le texte à traduire
      - Le texte à traduire est délimité par les balises suivantes
        - /tl <langue source> <langue destination>
        - end/
    - Demande à *YandexTranslateService* de traduire le texte
    - Remplace le texte à traduire + balises par le résultat renvoyé par *YandexTranslateService*
  - Malheureusement, ce n'était pas le comportement attendu
    - On souhaite insérer une balise dans le document
    - Le bot doit
      - Récupérer le texte précédent cette balise
      - Le traduire
      - L'insérer après la balise
  - Implémentation de ce comportement
    - Ajout de *RealTimeTranslator*
    - Détecte le tag de l'utilisateur /rt
    - Le remplace par son propre tag
      - Cela lui permet de récupérer l'ID LogootSplit de ce tag
      - Cet ID est ensuite utilisé pour récupérer l'index du tag dans le document
    - Traduit le texte
      - Utilise /diff/ pour comparer l'ancienne traduction et la nouvelle
      - Permet de seulement mettre à jour les parties de la traduction concernées par les modifications du texte initial
- PLM : Corriger l'exécution du code de l'apprenant en Python
  - Le bug rencontré par Cédric n'est pas reproductible dans mon environnement de dev
  - Par contre, dans un container Docker basé sur l'image de webPLM, je rencontre une erreur lié à *JRuby*
    - Je n'inclus pas le jar de *JRuby* dans *PLM-engine*
  - Ajout de *JRuby* dans *PLM-engine*
    - Résous l'erreur lié à *JRuby*
  - Je rencontre dorénavant l'erreur reportée par Cédric
    - Cette erreur semble liée à la version de *Jython* utilisée
  - Mise à jour de *Jython*
  - Le plus troublant est que les juges arrivaient à exécuter du code Python
    - *JRuby* était correctement inclus dans le jar de *PLM* fourni aux juges
    - Mais ils auraient dû déclencher l'erreur liée à la version de *Jython*
*** Planned
**** DONE PLM : Corriger l'exécution du code de l'apprenant en Python
- Cédric de Pentila m'a contacté à propos des problèmes qu'il rencontre pour exécuter du code Python
- Il rencontre l'erreur suivante en essayant d'exécuter son programme Python
#+BEGIN_SRC
java.lang.NullPointerException
  at org.python.core.Py.recursiveIsInstance(Py.java:1861)
  at org.python.core.Py.isInstance(Py.java:1828)
  at org.python.core.__builtin__.isinstance(__builtin__.java:725)
  at org.python.core.Py.displayException(Py.java:1009)
  at org.python.core.PyException.printStackTrace(PyException.java:79)
  at org.python.core.PyException.toString(PyException.java:98)
  at java.lang.Throwable.<init>(Throwable.java:311)
  at java.lang.Exception.<init>(Exception.java:102)
  at javax.script.ScriptException.<init>(ScriptException.java:65)
  at org.python.jsr223.PyScriptEngine.scriptException(PyScriptEngine.java:192)
  at org.python.jsr223.PyScriptEngine.eval(PyScriptEngine.java:43)
  at org.python.jsr223.PyScriptEngine.eval(PyScriptEngine.java:33)
  at javax.script.AbstractScriptEngine.eval(AbstractScriptEngine.java:264)
  at plm.core.lang.ScriptingLanguage.runEntity(Unknown Source)
  at plm.core.model.lesson.ExerciseRunner$3.run(Unknown Source)
  at java.lang.Thread.run(Thread.java:745)
#+END_SRC
- Trouver l'origine de cette erreur et la résoudre
**** DONE MUTE : Implémenter le bot de traduction
- Dans le cadre de l'évaluation de l'équipe du 13 octobre, une démo de [[https://github.com/coast-team/mute-demo][MUTE]] est prévue
- L'idée est de mettre en avant la fonctionnalité des bots à l'aide d'un bot qui traduirait pour nous le document
- Le code du bot est disponible ici : https://github.com/coast-team/mute-bot-eve
- Analyser le document pour détecter les parties du document à traduire
- Interroger *Yandex* pour traduire le texte
- Remplacer le texte par sa traduction
**** DONE TVPaint : Réviser les notions autour du *Business Process* et des *Workflows*
- Nécessaire pour pouvoir mieux appréhender la tâche consistant à définir un process pour représenter le déroulement de la réalisation d'un film avec TVPaint
- Sources à utiliser:
  - http://webloria.loria.fr/~charoy/uploads/Main/BPM2pp.pdf
  - http://www.workflowpatterns.com/
  - http://fr.bonitasoft.com/ressources
** Semaine du <2016-10-03 lun.> au <2016-10-07 ven.>
*** Done
- TVPaint : Définir le business process correspondant à la réalisation d'un film
  - Quelques questions sont apparus au cours de la réalisation
    - Est-ce qu'il y a une phase de validation
      - Après la réalisation du storyboard
      - Après la réalisation de l'animatique
    - Est-ce que l'animatique et le storyboard se font de façon séquentielle ou parallèle?
    - Est-ce que l'animatique "modifie" le storyboard ou produit une nouvelle donnée?
    - Qui s'occupe de l'élaboration du layout du shot?
    - Est-ce que l'élaboration du layout du shot inclus le typage de chaque clip?
- PLM : Release d'une nouvelle version de PLM
  - Transfert des commits modifiant l'UI dans une branche distincte
  - Activation des leçons sur la récursivité
  - Correction du nom des fichiers de consignes pour l'exercice *Occurrences*
  - Correction de l'entité Java de l'exercice *IsMember*
  - Augmentation de la limite de temps d'exécution de PLM-judge
  - Release de webPLM:2.1.1 et de PLM-judge:2.1.1
- PLM : Corriger l'exécution de code Java
  - L'erreur ne semble se produire qu'en exécutant du code via les juges
  - L'erreur est liée à 2 morceaux de code
    - [[https://github.com/BuggleInc/PLM/blob/master/src/plm/core/lang/ProgrammingLanguage.java#L131-L139][ProgrammingLanguage.getProgrammingLanguage()]]
    - [[https://github.com/BuggleInc/PLM/blob/master/src/plm/core/model/lesson/BlankExercise.java#L26-L27][BlankExercise()]]
  - Lorsqu'on désérialise un exercice, on regénère les instances de *SourceFile* pour chaque langage de programmation
  - Ainsi, on instancie le *SourceFile* et on le stocke dans une *Map* en l'associant au *ProgrammingLanguage* retourné par /getProgrammingLanguage()/
  - Sauf que la fonction /getProgrammingLanguage()/ retourne une valeur par défaut s'il ne trouve pas de *ProgrammingLanguage* correspondant à la chaîne passée en paramètre
  - Du coup, lorsqu'on rencontre un *ProgrammingLanguage* inconnu, on remplace le *SourceFile* associé au langage par défaut par celui nouvellement créé
  - Ici, c'est *Blockly* qui n'est pas supporté par *PLM-judge* et qui pose problème
  - Ajout du support de *Blockly*
  - Ouverture d'une issue pour garder une trace du problème : https://github.com/BuggleInc/PLM/issues/477
- PLM : Corriger l'exercice Polygon360
  - L'erreur ne provient pas de la sérialisation JSON stockée
    - Supprimer la sérialisation de l'exercice et l'instancier depuis les sources ne corrige pas le problème
  - Le plus troublant est l'affichage du monde objectif
  - Une partie du polygone semble manquer dans le monde objectif
    #+CAPTION: Partie manquante du polygone
    #+NAME:   fig:polygon360-missingline.png
    [[file:img/polygon360-missingline.png]]
  - Représentation des lignes indiquées dans le message d'erreur
    #+CAPTION: Lignes posant problème
    #+NAME:   fig:polygon360-showlines.png
    [[file:img/polygon360-showlines.png]]
    - La ligne bleue correspond à la ligne manquante dans le monde objectif
    - La ligne rouge correspond à la ligne manquante dans le monde courant
  - On arrive à la même conclusion en listant les *Shapes* présentes dans chacun des mondes
    #+BEGIN_SRC
    // Lines of the current world with x1 or x2 > 262
    CurrentWorld: Line (x262,263 y127,117 / x263,445 y135,028 / black)
    CurrentWorld: Line (x262,923 y164,938 / x263,968 y154,996 / black)
    CurrentWorld: Line (x263,445 y135,028 / x264,177 y149,000 / black)

    // Lines of the answer world with x1 or x2 > 262
    AnswerWorld: Line (x262,263 y127,117 / x263,445 y135,028 / black)
    AnswerWorld: Line (x262,923 y164,938 / x263,968 y154,996 / black)
    AnswerWorld: Line (x263,968 y154,996 / x264,177 y149,000 / black)
    #+END_SRC
*** Planned
**** DONE PLM : Release une nouvelle version de PLM
- Pour le module de TOP à TN, les étudiants vont travailler sur PLM
- Les enseignements de ce module porte notamment sur la récursivité
- Les leçons correspondantes ne sont pas activées dans la version actuelle de la PLM
- Les activer et déployer la nouvelle version
**** DONE PLM : Corriger l'exécution de code Java
- Depuis la mise à jour, l'exécution du code Java génère une erreur
  #+BEGIN_SRC
  Compilation error: Environment.java:0:class, interface, or enum expected
  #+END_SRC
- Trouver l'origine de l'erreur et la corriger
** Semaine du <2016-10-10 lun.> au <2016-10-14 ven.>
*** Done
- TVPaint : Définir le business process correspondant à la réalisation d'un film
  - Ajout des phases de vérification pour
    - Le storyboard
    - L'animation
  - Ajout des données des formulaires
    - Création du film
    - Phases de vérification
  - Difficultés rencontrées
    - Bloque sur l'instanciation d'un *Storyboard* et d'une *Animation* à partir des fichiers soumis par les utilisateurs
    - Aussi des difficultés sur la multi-instanciation du process pour gérer un shot
      - On souhaite générer une instance du process pour chaque shot
      - La liste des shots se trouvent dans l'instance de *Film*
      - Mais je n'arrive pas accéder à la variable de process /movie/
      - Pour l'instant, je passe par une autre variable de process /shots/
  - Quelques questions sur les modèles de données
    - À quoi correspond le modèle de données *Scene* ?
    - Que contient le modèle de données *Animation* ?
*** Planned
**** TODO TVPaint : Définir le business process correspondant à la réalisation d'un film
- Le process a été décrit sommairement dans l'image suivante
  #+CAPTION: Réalisation d'un film
  #+NAME:   fig:WorkflowExample2.png
  [[file:img/WorkflowExample2.png]]
- Le réaliser sous *Bonita Studio*
  - Réfléchir aux données nécessaires
  - Voir comment représenter la réalisation des shots et des clips
**** TODO PLM : Gérer les exercices n'ayant pas d'entité solution dans le langage de programmation par défaut
- Actuellement, on considère que l'ensemble des exercices possèdent une entité solution en Java
- Lors de leur instanciation à partir des sources, on essaie de calculer le(s) monde(s) objectif(s) à partir de cette entité solution
- Ajouter un mécanisme de fallback vers un autre langage si l'entité solution Java n'est pas trouvée
- Déclencher une erreur si aucune entité solution n'est trouvée
**** TODO PLM : Ajouter des tests d'intégration pour vérifier la sérialisation JSON
- Semblerait que la sérialisation JSON foire de temps en temps
  - Le JSON généré ne contient pas les opérations de la solution
- Implémenter des tests d'intégration
  - Vérifier si la sérialisation JSON existe
  - Vérifier si la sérialisation JSON peut être désérialiser correctement
  - Vérifier si l'instance obtenue possède des opérations solutions
  - Vérifier si les opérations solutions permettent bien d'atteindre l'état objectif ?
    - Je ne suis pas sûr qu'on puisse rejouer les opérations côté serveur actuellement
**** TODO PLM : Corriger l'exercice Polygon360
- L'exercice Polygon360 ne peut pas être résolu actuellement
- Lorsqu'on soumet le code de la correction, on n'arrive pas à atteindre le monde objectif
  #+BEGIN_SRC
  Le monde 'Polygon360' diffère: x1 diffère. (trouvé Line (x263.445 y135.028 / x264.177 y149.000 / black) au lieu de Line (x263.968 y154.996 / x264.177 y149.000 / black) ) 
  #+END_SRC
- L'erreur a été reportée ici : https://github.com/BuggleInc/webPLM/issues/130
**** TODO PLM : Release une image de NGINX pour le mode développement
- Depuis le rework du protocole de communication avec les juges, NGINX est utilisé comme reverse-proxy pour accéder à la queue de message
  - Le port 15674 (utilisé par STOMP) n'est pas ouvert sur la machine de TN
  - NGINX permet d'accéder à ce port via un reverse-proxy
- Ceci empêche le docker-compose pour le mode développement de fonctionner correctement
  - Il ne met pas en place de NGINX
- Faire une image Docker de NGINX pour le développement
- Mettre à jour le docker-compose correspondant
